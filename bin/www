#!/usr/bin/env node

const http = require('http');
const config = require('../config');
const createApp = require('../src/app');
const models = require('../src/models');
const Database = require('../src/utils/database');

const database = new Database(config.dbConnectionUri, models);
const app = createApp({ ...config, database });
const server = http.createServer(app);

function pipeOrPort(address) {
  return typeof address === 'string' ? `pipe ${address}` : `port ${address.port}`;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = pipeOrPort(server.address());

  switch (error.code) {
    case 'EACCES':
      console.error(`[HTTP-Server]: ${bind} requires elevated privileges.`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`[HTTP-Server]: ${bind} is already in use.`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const bind = pipeOrPort(server.address());
  console.log(`[HTTP-Server]: listening on ${bind}`);
}

process.on('SIGINT', () => {
  database.close();
  console.info('[Database]: connection closed due to NodeJs process termination');
  process.exit(0);
});

server.on('error', onError);
server.on('listening', onListening);

database.connect(error => {
  if (error) {
    console.error(`[Database]: ${error.message}`);
    process.exit(1);
  }
  server.listen(app.get('port'));
});
